#include <stdlib.h>
#include <stdio.h>

#include "queue.h"
#include "parser.h"
#include "calc.h"

#suite calc

#test calc_test_0
     char *str = "0.07*(1 + 0.07)^12";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, 0.15765341122, 1e-7);
  
#test calc_test_1
     char *str = "2 * tan(6) / (1 + tan(5)^2)";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, -0.0468311814, 1e-7);

#test calc_test_2
     char *str = "tan(5)^2";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, 11.4278817075, 1e-7);

#test calc_test_3
     char *str = "/0";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(1, erc);
     ck_assert_double_eq_tol(num, 0, 1e-7);

#test calc_test_4
     char *str = "+10833.33+10750.00+10666.67+10583.33+10500.00+10416.67+10333.33+10250.00+10166.67+10083.33";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, 104583.33, 1e-7);

#test calc_test_5
     char *str = "100000 * (0.07*(1 + 0.07)^12)/((1+0.07)^12 - 1)";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, 12590.1988655, 1e-7);

#test calc_test_6
     char *str = "tanlogx/cosx - tanlogx/sinx";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, -1.08748127511, 1e-7);

#test calc_test_7
     char *str = "x/cosx";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, -4.80599592344, 1e-7);

#test calc_test_8
     char *str = "5-*-5";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(1, erc);
     ck_assert_double_eq_tol(num, 0, 1e-7);

#test calc_test_9
     char *str = "2^3^2";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, 512, 1e-7);

#test calc_test_10
     char *str = "-(3)*(-1-(7*(-(-(-(--7))))))";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, -144, 1e-7);

#test calc_test_11
     char *str = "(1+2)*4*(cos(2*7-2)+sin(2*3))*70^(-10)+5*(-3)";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, -15, 1e-7);

#test calc_test_12
     char *str = "-cos 5 --tan(4 mod 5)";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, 0.87415909688, 1e-7);

#test calc_test_13
     char *str = "--tan((4)mod5)";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, 1.15782128235, 1e-7);

#test calc_test_14
     char *str = "";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(1, erc);
     ck_assert_double_eq_tol(num, 0, 1e-7);

#test calc_test_15
     char *str = "-7-----7";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, -14, 1e-7);

#test calc_test_16
     char *str = "cos-5 +(-1/sin(3))";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, -6.80250521027, 1e-7);

#test calc_test_17
     char *str = "QString::number";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(1, erc);
     ck_assert_double_eq_tol(num, 0, 1e-7);

#test calc_test_18
     char *str = "-9-8";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, -17, 1e-7);

#test calc_test_19
     char *str = "9 + 8 * 7 - 6 / 5";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, 63.8, 1e-7);

#test calc_test_20
     char *str = "100.235+x-(x+10)";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, 90.235, 1e-7);

#test calc_test_21
     char *str = "";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(1, erc);
     ck_assert_double_eq_tol(num, 0, 1e-7);

#test calc_test_22
     char *str = "cos(4)+(3-1)";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, 1.34635637914, 1e-7);

#test calc_test_23
     char *str = "cos(5)+(-1/sin(3))";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, -6.80250521027, 1e-7);

#test calc_test_24
     char *str = "";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(1, erc);
     ck_assert_double_eq_tol(num, 0, 1e-7);

#test calc_test_25
     char *str = "2 * tan(6) / (1 + tan(5)^2)";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, -0.0468311814, 1e-7);

#test calc_test_26
     char *str = "2 ^ (-3))";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(1, erc);
     ck_assert_double_eq_tol(num, 0, 1e-7);

#test calc_test_27
     char *str = "2 ^ (-3)";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, 0.125, 1e-7);

#test calc_test_28
     char *str = "15/(7-(1+1))*3-(2+(1+1))*15/(7-(200+1))*3-(2+(1+1))*(15/(7-(1+1))*3-(2+(1+1))+15/(7-(1+1))*3-(2+(1+1)))";
     double num = 0;
     int erc = get_expression_and_calculate(str, 2, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, -30.0721649485, 1e-7);

#test calc_test_29
     char *str = "4^acos(x/4)/tan(2*x)";
     double num = 0;
     int erc = get_expression_and_calculate(str, 3.5, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, 2.31214930869, 1e-7);

#test calc_test_30
     char *str = "-sqrt(x^log(5-x))+ln(55/(2+x))";
     double num = 0;
     int erc = get_expression_and_calculate(str, 3.5, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, 1.18597174919, 1e-7);

#test calc_test_31
     char *str = "4^cos(x/4)/tan(2*x) + sin 4";
     double num = 0;
     int erc = get_expression_and_calculate(str, 3, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, -10.2326565899, 1e-7);

#test calc_test_32
     char *str = "4^acos(x/4)/tan(2*x)";
     double num = 0;
     int erc = get_expression_and_calculate(str, 3, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, -9.35895040639, 1e-7);

#test calc_test_33
     char *str = "4^asin(x/4)/tan(2*x)";
     double num = 0;
     int erc = get_expression_and_calculate(str, 3, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, -11.1347896959, 1e-7);

#test calc_test_34
     char *str = "4^sin(x/4)/atan(2*x)";
     double num = 0;
     int erc = get_expression_and_calculate(str, 3, &num);
     ck_assert_int_eq(0, erc);
     ck_assert_double_eq_tol(num, 1.83025227465, 1e-7);

#test calc_test_35
     char *str = "-";
     double num = 0;
     int erc = get_expression_and_calculate(str, 3, &num);
     ck_assert_int_eq(1, erc);
     ck_assert_double_eq_tol(num, 0, 1e-7);

#test calc_test_36
     char *str = "2+";
     double num = 0;
     int erc = get_expression_and_calculate(str, 3, &num);
     ck_assert_int_eq(1, erc);
     ck_assert_double_eq_tol(num, 0, 1e-7);